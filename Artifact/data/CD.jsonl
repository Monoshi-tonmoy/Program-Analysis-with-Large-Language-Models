{"idx": 0, "code": "#include <stdio.h>\nint main() {\n    int number;\n\n    printf(\"Enter an integer: \");\n    \n    // reads and stores input\n    scanf(\"%d\", &number);\n\n    // displays output\n    printf(\"You entered: %d\", number);\n    \n    return 0;\n}"}
{"idx": 1, "code": "#include <stdio.h>\n\nint main() {\n    int A, B, sum = 0;\n\n    // Ask user to enter the two numbers\n    printf(\"Enter two numbers A and B : \\n\");\n\n    // Read two numbers from the user || A = 2, B = 3\n    scanf(\"%d%d\", &A, &B);\n\n    // Calculate the addition of A and B\n    // using '+' operator\n    sum = A + B;\n\n    // Print the sum\n    printf(\"Sum of A and B is: %d\", sum);\n\n    return 0;\n}"}
{"idx": 2, "code": "// C program for the even or odd\n#include <stdio.h>\n\n// Function to check if a \n// number is even or odd\nvoid checkEvenOdd(int N) {\n    // Find remainder\n    int r = N % 2;\n\n    // Condition for even\n    if (r == 0)  {\n        printf(\"Even\");\n    }\n\n    // Otherwise\n    else {\n        printf(\"Odd\");\n    }\n}"}
{"idx": 3, "code": "// C program to find roots of\n// a quadratic equation\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n\n// Prints roots of quadratic\n// equation ax*2 + bx + x\nvoid findRoots(int a, int b, int c)\n{\n    // If a is 0, then equation is\n    // not quadratic, but linear\n    if (a == 0) {\n        printf(\"Invalid\");\n        return;\n    }\n\n    int d = b * b - 4 * a * c;\n    double sqrt_val = sqrt(abs(d));\n\n    if (d > 0) {\n        printf(\"Roots are real and different\\n\");\n        printf(\"%f\\n%f\", (double)(-b + sqrt_val) / (2 * a),\n               (double)(-b - sqrt_val) / (2 * a));\n    }\n    else if (d == 0) {\n        printf(\"Roots are real and same\\n\");\n        printf(\"%f\", -(double)b / (2 * a));\n    }\n    else // d < 0\n    {\n        printf(\"Roots are complex\\n\");\n        printf(\"%f + i%f\\n%f - i%f\", -(double)b / (2 * a),\n               sqrt_val / (2 * a), -(double)b / (2 * a),\n               sqrt_val / (2 * a));\n    }\n}\n\n// Driver code\nint main()\n{\n    int a = 1, b = -7, c = 12;\n\n    // Function call\n    findRoots(a, b, c);\n    return 0;\n}"}
{"idx": 4, "code": "// C program interchange the elements\n// of first and last in a matrix\n// across rows.\n#include <stdio.h>\n\n#define n 3\n\n// Function to swap the element\n// of first and last row\nvoid interchangeFirstLast(int m[][n])\n{\n    int rows = n;\n\n    // Swapping of element between first\n    // and last rows\n    for (int i = 0; i < n; i++)\n    {\n        int t = m[0][i];\n        m[0][i] = m[rows - 1][i];\n        m[rows - 1][i] = t;\n    }\n}\n\n// Driver code\nint main()\n{\n    // Input matrix\n    int m[n][n] = {{6, 3, 1},\n                   {4, 5, 2},\n                   {2, 4, 9}};\n\n    // Printing the input matrix\n    printf(\"Input Matrix: \\n\");\n    for (int i = 0; i < n; i++)\n    {\n        for (int j = 0; j < n; j++)\n        {\n            printf(\"%d \", m[i][j]);\n        }\n        printf(\"\\n\");\n    }\n\n    // call interchangeFirstLast(m) function.\n    // This function swap the element of\n    // first and last row\n    interchangeFirstLast(m);\n\n    // Printing the original matrix\n    printf(\"\\nOutput Matrix: \\n\");\n    for (int i = 0; i < n; i++)\n    {\n        for (int j = 0; j < n; j++)\n        {\n            printf(\"%d \", m[i][j]);\n        }\n        printf(\"\\n\");\n    }\n}"}
{"idx": 5, "code": "#include <stdio.h>\n\n// Drivers code\nint main()\n{\n    int arr1[5][5] = { { 0, 1, 2, 3, 4 },\n                       { 2, 3, 4, 5, 6 },\n                       { 4, 5, 6, 7, 8 },\n                       { 5, 4, 3, 2, 6 },\n                       { 2, 5, 4, 3, 1 } };\n    int* arr2[5][5];\n\n    // Initialising each element of the\n    // pointer array with the address of\n    // element present in the other array\n    for (int i = 0; i < 5; i++) {\n        for (int j = 0; j < 5; j++) {\n            arr2[i][j] = &arr1[i][j];\n        }\n    }\n\n    // Printing the array using\n    // the array of pointers\n    printf(\"The values are\\n\");\n    for (int i = 0; i < 5; i++) {\n        for (int j = 0; j < 5; j++) {\n            printf(\"%d \", *arr2[i][j]);\n        }\n        printf(\"\\n\");\n    }\n\n    return 0;\n}"}
{"idx": 6, "code": "// C Program to convert \n// Fahrenheit to Celsius \n#include <stdio.h> \n\n// Function to convert Degree \n// Fahrenheit to Degree Celsius \nfloat fahrenheit_to_celsius(float f) \n{ \n\treturn ((f - 32.0) * 5.0 / 9.0); \n} \n\n// Driver code \nint main() \n{ \n\tfloat f = 40; \n\n\t// Passing parameter to function \n\tprintf(\"Temperature in Degree Celsius : %0.2f\", \n\t\tfahrenheit_to_celsius(f)); \n\treturn 0; \n}"}
{"idx": 7, "code": "// C program to implement \n// the above approach \n#include <stdio.h> \n\n// Driver code \nint main() \n{ \n\t// We can change values here for \n\t// different inputs \n\tfloat P = 1, R = 1, T = 1; \n\n\t// Calculate simple interest \n\tfloat SI = (P * T * R) / 100; \n\n\t// Print Simple Interest \n\tprintf(\"Simple Interest = %f\\n\", SI); \n\n\treturn 0; \n}"}
{"idx": 8, "code": "// C program to demonstrate the\n// area and perimeter of rectangle\n#include <stdio.h>\n\nint main()\n{\n\n\tint l = 10, b = 10;\n\tprintf(\"Area of rectangle is : %d\", l * b);\n\tprintf(\"\\nPerimeter of rectangle is : %d\", 2 * (l + b));\n\treturn 0;\n}"}
{"idx": 9, "code": "// C++ Program to display alphabets using ASCII values\n#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n\tint i;\n\n\tcout << \"Alphabets from (A-Z) are:\\n\";\n\n\t// ASCII value of A=65 and Z=90\n\tfor (i = 65; i <= 90; i++) {\n\t\t// Integer i with %c will be converted to character\n\t\t// before printing.%c will takes its equivalent\n\t\t// character value\n\t\tcout << (char)i << \" \";\n\t}\n\n\tcout << \"\\nAlphabets from (a-z) are:\\n\";\n\n\t// ASCII value of a=97 and z=122\n\tfor (i = 97; i <= 122; i++) {\n\t\t// Integer i with %c will be converted to character\n\t\t// before printing.%c will takes its equivalent\n\t\t// character value\n\t\tcout << (char)i << \" \";\n\t}\n\treturn 0;\n}"}
{"idx": 10, "code": "// C program to implement the above approach\n#include <stdio.h>\n\n// Function to find factorial of given number\nunsigned int factorial(unsigned int n)\n{\n\tint result = 1, i;\n\n\t// loop from 2 to n to get the factorial\n\tfor (i = 2; i <= n; i++) {\n\t\tresult *= i;\n\t}\n\n\treturn result;\n}\n\n// Driver code\nint main()\n{\n\tint num = 5;\n\tprintf(\"Factorial of %d is %d\", num, factorial(num));\n\treturn 0;\n}"}
{"idx": 11, "code": "// C Program to make a Simple Calculator\n// Using switch case\n#include <stdio.h>\n#include <stdlib.h>\n\n// Driver code\nint main()\n{\n\tchar ch;\n\tdouble a, b;\n\twhile (1) {\n\t\tprintf(\"Enter an operator (+, -, *, /), \"\n\t\t\t\"if want to exit press x: \");\n\t\tscanf(\" %c\", &ch);\n\n\t\t// to exit\n\t\tif (ch == 'x')\n\t\t\texit(0);\n\t\tprintf(\"Enter two first and second operand: \");\n\t\tscanf(\"%lf %lf\", &a, &b);\n\n\t\t// Using switch case we will differentiate\n\t\t// operations based on different operator\n\t\tswitch (ch) {\n\n\t\t// For Addition\n\t\tcase '+':\n\t\t\tprintf(\"%.1lf + %.1lf = %.1lf\\n\", a, b, a + b);\n\t\t\tbreak;\n\n\t\t// For Subtraction\n\t\tcase '-':\n\t\t\tprintf(\"%.1lf - %.1lf = %.1lf\\n\", a, b, a - b);\n\t\t\tbreak;\n\n\t\t// For Multiplication\n\t\tcase '*':\n\t\t\tprintf(\"%.1lf * %.1lf = %.1lf\\n\", a, b, a * b);\n\t\t\tbreak;\n\n\t\t// For Division\n\t\tcase '/':\n\t\t\tprintf(\"%.1lf / %.1lf = %.1lf\\n\", a, b, a / b);\n\t\t\tbreak;\n\n\t\t// If operator doesn't match any case constant\n\t\tdefault:\n\t\t\tprintf(\n\t\t\t\t\"Error! please write a valid operator\\n\");\n\t\t}\n\n\t\tprintf(\"\\n\");\n\t}\n}"}
{"idx": 12, "code": "// C program to Demonstrate the\n// Multiplication table of a number\n#include <stdio.h>\nvoid print_table(int range, int num)\n{\n\t// Declaring a variable mul to store the product.\n\tint mul;\n\n\t// For loop to calculate the Multiplication table.\n\tfor (int i = 1; i <= range; i++) {\n\t\t// To store the product.\n\t\tmul = num * i;\n\n\t\t// Printing the Multiplication Table.\n\t\tprintf(\"%d * %d = %d\", num, i, mul);\n\n\t\t// Proceeding to the next line.\n\t\tprintf(\"\\n\");\n\t}\n}\n// Driver code\nint main()\n{\n\n\t// The range of the\n\t// Multiplication table\n\tint range = 10;\n\n\t// The number to calculate the\n\t// Multiplication table\n\tint num = 5;\n\n\t// Calling the Function.\n\tprint_table(range, num);\n\n\treturn 0;\n}"}
{"idx": 13, "code": "// C Program to print the Fibonacci series using recursion \n#include <stdio.h> \n\n// first two values \nint prev1 = 1; \nint prev2 = 0; \n\n// recursive function to print the fibonacci series \nvoid fib(int n) \n{ \n\tif (n < 3) { \n\t\treturn; \n\t} \n\tint fn = prev1 + prev2; \n\tprev2 = prev1; \n\tprev1 = fn; \n\tprintf(\"%d \", fn); \n\treturn fib(n - 1); \n} \n\n// function that handles the first two terms and calls the \n// recursive function \nvoid printFib(int n) \n{ \n\t// when the number of terms is less than 1 \n\tif (n < 1) { \n\t\tprintf(\"Invalid number of terms\\n\"); \n\t} \n\t// when the number of terms is 1 \n\telse if (n == 1) { \n\t\tprintf(\"%d \", 0); \n\t} \n\t// when the number of terms is 2 \n\telse if (n == 2) { \n\t\tprintf(\"%d %d\", 0, 1); \n\t} \n\t// number of terms greater than 2 \n\telse { \n\t\tprintf(\"%d %d \", 0, 1); \n\t\tfib(n); \n\t} \n\treturn; \n} \n\n// driver code \nint main() \n{ \n\tint n = 9; \n\tprintFib(n); \n\treturn 0; \n}"}
{"idx": 14, "code": "// C program to find LCM of \n// two numbers \n#include <stdio.h> \n\n// Driver code \nint main() \n{ \n\tint x = 15, y = 25, max; \n\tmax = (x > y) ? x : y; \n\n\t// While loop to check if max variable \n\t// is divisible by x and y \n\twhile (1) { \n\t\tif (max % x == 0 && max % y == 0) { \n\t\t\tprintf(\"The LCM of %d and %d is %d.\", x, y, \n\t\t\t\tmax); \n\t\t\tbreak; \n\t\t} \n\n\t\t++max; \n\t} \n\n\treturn 0; \n}"}