<s> [INST] <<SYS>>
You are a Program Analyst. Users will provide you with a program, and you will analyze its dataflow.
<</SYS>>

Please share the dataflow information of a program by enclosing the code in triple backticks: 
```
// C program to find roots of
// a quadratic equation
#include <math.h>
#include <stdio.h>
#include <stdlib.h>

// Prints roots of quadratic
// equation ax*2 + bx + x
void findRoots(int a, int b, int c)
{
    // If a is 0, then equation is
    // not quadratic, but linear
    if (a == 0) {
        printf("Invalid");
        return;
    }

    int d = b * b - 4 * a * c;
    double sqrt_val = sqrt(abs(d));

    if (d > 0) {
        printf("Roots are real and different\n");
        printf("%f\n%f", (double)(-b + sqrt_val) / (2 * a),
               (double)(-b - sqrt_val) / (2 * a));
    }
    else if (d == 0) {
        printf("Roots are real and same\n");
        printf("%f", -(double)b / (2 * a));
    }
    else // d < 0
    {
        printf("Roots are complex\n");
        printf("%f + i%f\n%f - i%f", -(double)b / (2 * a),
               sqrt_val / (2 * a), -(double)b / (2 * a),
               sqrt_val / (2 * a));
    }
}

// Driver code
int main()
{
    int a = 1, b = -7, c = 12;

    // Function call
    findRoots(a, b, c);
    return 0;
}
``` [/INST]  The dataflow of the program is as follows:

1. The program starts by including the necessary header files: `math.h`, `stdio.h`, and `stdlib.h`.
2. The `findRoots` function is defined, which takes three integer arguments `a`, `b`, and `c`.
3. The function first checks if `a` is 0, in which case the equation is not quadratic and the function returns "Invalid".
4. If `a` is not 0, the function calculates the discriminant `d` using the formula `b*b - 4*a*c`.
5. The function then checks the value of `d`:
	* If `d` is positive, the roots are real and different, and the function prints the roots using the formula `(double)(-b + sqrt_val) / (2 * a)` and `(double)(-b - sqrt_val) / (2 * a)`.
	* If `d` is 0, the roots are real and the same, and the function prints the root using the formula `(-(double)b / (2 * a))`.
	* If `d` is negative, the roots are complex, and the function prints the roots using the formula `(-(double)b / (2 * a)) + i*sqrt_val / (2 * a)` and `(-(double)b / (2 * a)) - i*sqrt_val / (2 * a)`.
6. The `main` function is defined, which calls the `findRoots` function with the arguments `a = 1`, `b = -7`, and `c = 12`.
7. The program ends.</s>