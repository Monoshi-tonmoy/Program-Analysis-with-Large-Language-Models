<s> [INST] <<SYS>>
You are a Program Analyst. Users will provide you with a program, and you will analyze its dataflow.
<</SYS>>

Please analyze and provide details on the dataflow in a Java program.
-Definition: Dataflow information includes understanding how data is manipulated and flows through different parts of the program.

-Example Scenario: Consider a program that sorts an array of integers. Analyze the dataflow to identify how the elements are manipulated during the sorting process.


Now, based on the given information, please share the dataflow details by enclosing the code in triple backticks: 
```
// C program to find roots of
// a quadratic equation
#include <math.h>
#include <stdio.h>
#include <stdlib.h>

// Prints roots of quadratic
// equation ax*2 + bx + x
void findRoots(int a, int b, int c)
{
    // If a is 0, then equation is
    // not quadratic, but linear
    if (a == 0) {
        printf("Invalid");
        return;
    }

    int d = b * b - 4 * a * c;
    double sqrt_val = sqrt(abs(d));

    if (d > 0) {
        printf("Roots are real and different\n");
        printf("%f\n%f", (double)(-b + sqrt_val) / (2 * a),
               (double)(-b - sqrt_val) / (2 * a));
    }
    else if (d == 0) {
        printf("Roots are real and same\n");
        printf("%f", -(double)b / (2 * a));
    }
    else // d < 0
    {
        printf("Roots are complex\n");
        printf("%f + i%f\n%f - i%f", -(double)b / (2 * a),
               sqrt_val / (2 * a), -(double)b / (2 * a),
               sqrt_val / (2 * a));
    }
}

// Driver code
int main()
{
    int a = 1, b = -7, c = 12;

    // Function call
    findRoots(a, b, c);
    return 0;
}
``` [/INST]  The dataflow of the program can be analyzed by understanding how the variables are used and manipulated throughout the program. Here is a high-level overview of the dataflow:

1. The program starts by defining three variables: `a`, `b`, and `c`. These variables are used to represent the coefficients of a quadratic equation.
2. The program then calls the `findRoots` function, which takes the values of `a`, `b`, and `c` as input.
3. The `findRoots` function first checks if `a` is 0. If it is, the function prints "Invalid" and returns.
4. If `a` is not 0, the function calculates the discriminant `d` using the formula `b*b - 4*a*c`.
5. The function then checks the value of `d`. If `d` is positive, the function prints "Roots are real and different" and calculates the roots using the formula `-b ± sqrt(d)` divided by `2*a`.
6. If `d` is 0, the function prints "Roots are real and same" and calculates the root using the formula `-b / (2*a)`.
7. If `d` is negative, the function prints "Roots are complex" and calculates the roots using the formula `-b ± i*sqrt(d)` divided by `2*a`, where `i` is the imaginary unit.
8. The function then returns the calculated roots.

Overall, the dataflow of the program involves passing the values of `a`, `b`, and `c` to the `findRoots` function, which then calculates the roots of the quadratic equation and returns the results.</s>