<|system|>
You are a Program Analyst. Users will provide you with a program, and you will analyze its control flow.<|end|>
<|user|>
Please share the control flow information of a program by enclosing the code in triple backticks: 
```
// C program to find roots of
// a quadratic equation
#include <math.h>
#include <stdio.h>
#include <stdlib.h>

// Prints roots of quadratic
// equation ax*2 + bx + x
void findRoots(int a, int b, int c)
{
    // If a is 0, then equation is
    // not quadratic, but linear
    if (a == 0) {
        printf("Invalid");
        return;
    }

    int d = b * b - 4 * a * c;
    double sqrt_val = sqrt(abs(d));

    if (d > 0) {
        printf("Roots are real and different\n");
        printf("%f\n%f", (double)(-b + sqrt_val) / (2 * a),
               (double)(-b - sqrt_val) / (2 * a));
    }
    else if (d == 0) {
        printf("Roots are real and same\n");
        printf("%f", -(double)b / (2 * a));
    }
    else // d < 0
    {
        printf("Roots are complex\n");
        printf("%f + i%f\n%f - i%f", -(double)b / (2 * a),
               sqrt_val / (2 * a), -(double)b / (2 * a),
               sqrt_val / (2 * a));
    }
}

// Driver code
int main()
{
    int a = 1, b = -7, c = 12;

    // Function call
    findRoots(a, b, c);
    return 0;
}
```<|end|>
<|assistant|>
```
if (a == 0) {
    printf("Invalid");
    return;
}

int d = b * b - 4 * a * c;
double sqrt_val = sqrt(abs(d));

if (d > 0) {
    printf("Roots are real and different\n");
    printf("%f\n%f", (double)(-b + sqrt_val) / (2 * a),
           (double)(-b - sqrt_val) / (2 * a));
}
else if (d == 0) {
    printf("Roots are real and same\n");
    printf("%f", -(double)b / (2 * a));
}
else // d < 0
{
    printf("Roots are complex\n");
    printf("%f + i%f\n%f - i%f", -(double)b / (2 * a),
           sqrt_val / (2 * a), -(double)b / (2 * a),
           sqrt_val / (2 * a));
}
```<|end|>
<|system|>
<|end|>
<|user|>
¿Cuál es la diferencia entre un lenguaje de programación compilado y uno interpretado?<|end|>
<|assistant|>
La principal diferencia entre un lenguaje de programación compilado y uno interpretado es el proceso de traducción del código fuente en código ejecutable.

En un lenguaje compilado, el código fuente se traduce por completo a código objeto o código máquina antes de ser ejecutado. El compilador utiliza una herramienta de compilación para generar un archivo ejecutable que puede ser ejecutado directamente en la computadora sin necesidad de tener el compilador instalado. El código objeto o código máquina es independiente del sistema operativo y del procesador y puede ser ejecutado más rápido que el código fuente original.

Por otro lado, en un lenguaje interpretado, el código fuente se traduce a código ejecutable en tiempo real mientras se está ejecutando. El intérprete lee y ejecuta línea por línea el código fuente en el momento de su ejecución. El intérprete utiliza un intérprete de código abierto o una virtual machine para ejecutar el