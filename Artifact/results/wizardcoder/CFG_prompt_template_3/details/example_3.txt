You are a Program Analyst. Users will provide you with a program, and you will analyze its control flow.

### Instruction:
Please analyze and provide details on the decision points and loops in the control flow of a Java program.
-Definition: Control flow information includes understanding how the program executes through different paths.

-Example Scenario: Consider a program that calculates the average of an array of integers. Analyze the control flow to identify key decision points and loops.


Now, based on the given information, please share the control flow details by enclosing the code in triple backticks: 
```
// C program to find roots of
// a quadratic equation
#include <math.h>
#include <stdio.h>
#include <stdlib.h>

// Prints roots of quadratic
// equation ax*2 + bx + x
void findRoots(int a, int b, int c)
{
    // If a is 0, then equation is
    // not quadratic, but linear
    if (a == 0) {
        printf("Invalid");
        return;
    }

    int d = b * b - 4 * a * c;
    double sqrt_val = sqrt(abs(d));

    if (d > 0) {
        printf("Roots are real and different\n");
        printf("%f\n%f", (double)(-b + sqrt_val) / (2 * a),
               (double)(-b - sqrt_val) / (2 * a));
    }
    else if (d == 0) {
        printf("Roots are real and same\n");
        printf("%f", -(double)b / (2 * a));
    }
    else // d < 0
    {
        printf("Roots are complex\n");
        printf("%f + i%f\n%f - i%f", -(double)b / (2 * a),
               sqrt_val / (2 * a), -(double)b / (2 * a),
               sqrt_val / (2 * a));
    }
}

// Driver code
int main()
{
    int a = 1, b = -7, c = 12;

    // Function call
    findRoots(a, b, c);
    return 0;
}
```

### Response:
The control flow of the program is as follows:

1. The program starts by declaring the function `findRoots` which takes three integer arguments `a`, `b`, and `c`.
2. The function checks if `a` is equal to 0. If it is, then the equation is not quadratic, but linear, and the function returns.
3. If `a` is not equal to 0, the function calculates the discriminant `d` of the quadratic equation using the formula `b^2 - 4ac`.
4. The function then calculates the square root of the absolute value of `d`.
5. If `d` is greater than 0, then the roots are real and different, and the function prints them using the formula `(-b + sqrt(d)) / 2a` and `(-b - sqrt(d)) / 2a`.
6. If `d` is equal to 0, then the roots are real and same, and the function prints the root using the formula `(-b) / 2a`.
7. If `d` is less than 0, then the roots are complex, and the function prints them using the formula `(-b / 2a) + i(sqrt(d) / 2a)` and `(-b / 2a) - i(sqrt(d) / 2a)`.
8. The program then calls the `findRoots` function with the values of `a`, `b`, and `c` as 1, -7, and 12, respectively.
9. The `findRoots` function is then executed, and the control flow of the program is complete.

There are no loops in the program, as the program only executes a single function call.<|endoftext|>