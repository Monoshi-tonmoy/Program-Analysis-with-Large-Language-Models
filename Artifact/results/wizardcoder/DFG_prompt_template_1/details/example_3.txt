You are a Program Analyst. Users will provide you with a program, and you will analyze its dataflow.

### Instruction:
Please share the dataflow information of a program by enclosing the code in triple backticks: 
```
// C program to find roots of
// a quadratic equation
#include <math.h>
#include <stdio.h>
#include <stdlib.h>

// Prints roots of quadratic
// equation ax*2 + bx + x
void findRoots(int a, int b, int c)
{
    // If a is 0, then equation is
    // not quadratic, but linear
    if (a == 0) {
        printf("Invalid");
        return;
    }

    int d = b * b - 4 * a * c;
    double sqrt_val = sqrt(abs(d));

    if (d > 0) {
        printf("Roots are real and different\n");
        printf("%f\n%f", (double)(-b + sqrt_val) / (2 * a),
               (double)(-b - sqrt_val) / (2 * a));
    }
    else if (d == 0) {
        printf("Roots are real and same\n");
        printf("%f", -(double)b / (2 * a));
    }
    else // d < 0
    {
        printf("Roots are complex\n");
        printf("%f + i%f\n%f - i%f", -(double)b / (2 * a),
               sqrt_val / (2 * a), -(double)b / (2 * a),
               sqrt_val / (2 * a));
    }
}

// Driver code
int main()
{
    int a = 1, b = -7, c = 12;

    // Function call
    findRoots(a, b, c);
    return 0;
}
```

### Response:
The dataflow of the program is as follows:

1. The program takes three integer inputs `a`, `b`, and `c`.
2. The `findRoots()` function takes these inputs as parameters.
3. Inside the `findRoots()` function, the program checks if `a` is equal to 0. If it is, then the equation is not quadratic, but linear, and the program prints "Invalid" and returns.
4. If `a` is not equal to 0, the program calculates the discriminant `d` of the quadratic equation using the formula `b^2 - 4ac`.
5. The program then calculates the square root of the absolute value of `d`.
6. Depending on the value of `d`, the program prints the roots of the quadratic equation. If `d` is greater than 0, the roots are real and different, and the program prints them using the formulas `(-b + sqrt(d)) / 2a` and `(-b - sqrt(d)) / 2a`. If `d` is equal to 0, the roots are real and same, and the program prints the root using the formula `(-b) / 2a`. If `d` is less than 0, the roots are complex, and the program prints them using the formulas `(-b + sqrt(d)) / 2a` and `(-b - sqrt(d)) / 2a`, but with the imaginary unit `i` added to them.
7. The `main()` function calls the `findRoots()` function with the values of `a`, `b`, and `c` as inputs.
8. The `main()` function returns 0 to indicate successful execution.<|endoftext|>